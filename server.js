// egupych/test-form-vue/test-form-vue-e89867af06c86f9f3bb70c52bd333eef7bd73db6/server.js

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { body, validationResult } from 'express-validator';
import nodemailer from 'nodemailer';
import path from 'path';
import admin from 'firebase-admin';
import { fileURLToPath } from 'url';
import 'dotenv/config';
import multer from 'multer';
import fs from 'fs'; // <-- –î–û–ë–ê–í–õ–ï–ù–û: –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Multer ---
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 MB –Ω–∞ –æ–¥–∏–Ω —Ñ–∞–π–ª
const ALLOWED_MIMETYPES = [
    'image/jpeg', 'image/png', 'image/gif', 'image/webp',
    'application/pdf', 'application/msword', 
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation', // .pptx
    'application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed',
    'application/postscript', // .ai, .eps
    'image/vnd.adobe.photoshop' // .psd
];

const upload = multer({
    dest: 'uploads/',
    limits: {
        fileSize: MAX_FILE_SIZE 
    },
    fileFilter: (req, file, cb) => {
        if (ALLOWED_MIMETYPES.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!'), false);
        }
    }
});
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô MULTER ---

const requiredEnv = [
    'PORT', 'EMAIL_HOST', 'EMAIL_PORT', 'EMAIL_SECURE', 'EMAIL_USER', 'EMAIL_PASS', 'EMAIL_RECEIVER',
    'FIREBASE_PROJECT_ID', 'GOOGLE_APPLICATION_CREDENTIALS'
];
for (const envVar of requiredEnv) {
    if (!process.env[envVar]) {
        console.error(`\x1b[31m–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${envVar} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env.\x1b[0m`);
        process.exit(1);
    }
}

try {
    admin.initializeApp({
        credential: admin.credential.applicationDefault(),
        projectId: process.env.FIREBASE_PROJECT_ID,
    });
    console.log('\x1b[32m‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\x1b[0m');
} catch (error) {
    console.error('\x1b[31m--- –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK ---', error);
    process.exit(1);
}
const db = admin.firestore();

const app = express();
const PORT = process.env.PORT;

const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT, 10),
    secure: process.env.EMAIL_SECURE === 'true',
    auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
});

transporter.verify((error) => {
    if (error) {
        console.error('\x1b[31m--- –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nodemailer ---', error);
    } else {
        console.log('\x1b[32m‚úÖ Nodemailer –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º.\x1b[0m');
    }
});

app.use(express.json());
app.use(helmet());

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ CORS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ---
const whitelist = ['http://localhost:5173', 'https://redpanda.web.app/']; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || whitelist.indexOf(origin) !== -1) {
      callback(null, true)
    } else {
      callback(new Error('Not allowed by CORS'))
    }
  }
}
app.use(cors(corsOptions));
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô CORS ---

const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100,
});
app.use('/api/', limiter);

app.use(express.static(path.join(__dirname, 'dist')));

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
app.post(
    '/api/submit-form',
    upload.array('files', 10), // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ 10 —Ñ–∞–π–ª–æ–≤
    [
        body('name').trim().notEmpty().withMessage('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
        body('phone').trim().notEmpty().withMessage('–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
        body('email').trim().isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'),
        body('task').trim().notEmpty().withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (req.files) {
                req.files.forEach(file => fs.unlinkSync(file.path));
            }
            return res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
        }

        const { name, phone, email, company, task, promo } = req.body;
        const files = req.files; // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–∞—Å—Å–∏–≤

        const newSubmission = { 
            name, phone, email, 
            company: company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞', 
            task, 
            promo: promo || '–ù–µ —É–∫–∞–∑–∞–Ω', 
            timestamp: admin.firestore.FieldValue.serverTimestamp(), 
            ip: req.ip, 
            userAgent: req.headers['user-agent'],
            fileNames: files && files.length > 0 ? files.map(f => f.originalname) : ['–ù–µ—Ç —Ñ–∞–π–ª–æ–≤']
        };
        
        try {
            const mailOptions = {
                from: `"–§–æ—Ä–º–∞ —Å —Å–∞–π—Ç–∞ RedPanda" <${process.env.EMAIL_USER}>`,
                to: process.env.EMAIL_RECEIVER,
                subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –æ—Ç ${name}`,
                html: `<div style="font-family: Arial, sans-serif; line-height: 1.6;"><h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h2><p><strong>–ò–º—è:</strong> ${name}</p><p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p><p><strong>Email:</strong> ${email}</p><p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${newSubmission.company}</p><p><strong>–ü—Ä–æ–º–æ–∫–æ–¥:</strong> ${newSubmission.promo}</p><hr><h3>–ó–∞–¥–∞—á–∞:</h3><p>${task}</p></div>`,
                attachments: []
            };

            if (files && files.length > 0) {
                mailOptions.attachments = files.map(file => ({
                    filename: file.originalname,
                    path: file.path
                }));
            }

            await transporter.sendMail(mailOptions);
            await db.collection('submissions').add(newSubmission);
            
            res.status(200).json({ success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });
        } catch (error) {
            console.error('–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ó–ê–Ø–í–ö–ò:', error);
            res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
        } finally {
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
            if (files && files.length > 0) {
                files.forEach(file => fs.unlinkSync(file.path));
            }
        }
    }
);

app.post(
    '/api/subscribe',
    [ 
        body('email').trim().isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.')
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ success: false, message: errors.array()[0].msg });
        }

        const { email, sphere } = req.body;
        const subscribersRef = db.collection('subscribers');

        try {
            const snapshot = await subscribersRef.where('email', '==', email).get();
            if (!snapshot.empty) {
                return res.status(409).json({ success: false, message: '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É!' });
            }

            await subscribersRef.add({
                email: email,
                sphere: sphere || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                subscribedAt: admin.firestore.FieldValue.serverTimestamp()
            });

            res.status(200).json({ success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!' });
        } catch (error) {
            console.error('–û–®–ò–ë–ö–ê –ü–†–ò –ü–û–î–ü–ò–°–ö–ï:', error);
            res.status(500).json({ success: false, message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' });
        }
    }
);

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer ---
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ success: false, message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10 –ú–ë.' });
        }
    } else if (error) {
        return res.status(400).json({ success: false, message: error.message });
    }
    next();
});

app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

app.listen(PORT, () => {
    console.log(`\x1b[36müöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}\x1b[0m`);
});